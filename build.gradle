buildscript {
    dependencies {
        // To uncompress XZ and 7z files:
        classpath group: 'org.apache.commons', name: 'commons-compress', version: '1.15'
        classpath group: 'org.tukaani', name: 'xz', version: '1.6'
    }
}

plugins {
    id "com.github.ocroquette.extools" version "1.9"
    id "de.undercouch.download" version "3.3.0"
}

extools {
    // To build QT:
    tools "mingw": "mingw-x86_64-7.2.0-release-posix-sjlj-rt_v5-rev0"
}

def downloadDir = new File(buildDir, "extools/downloads")
def workDir = new File(buildDir, "extools/work")
def repoDir = new File(buildDir, "extools/repo")

task create_dirs {
    doLast {
        FileUtils.cleanDir(workDir)
        downloadDir.mkdirs()
        repoDir.mkdirs()
    }
}

task all {
    dependsOn "cmake_win",
            "cmake_mac",
            "jom_win",
            "ninja_win",
            "mingw64_gcc",
            "qtcreator_win",
            "qtsdk_win"
}

task cmake_win {
    dependsOn "create_dirs"

    doLast {
        // https://cmake.org/files/v3.10/cmake-3.10.0-win32-x86.zip
        def majorVersion = "3.10"
        def fullVersion = "${majorVersion}.0"
        def distBasename = "cmake-${fullVersion}-win32-x86"
        def distFilename = "${distBasename}.zip"
        def extFilename = "cmake-${fullVersion}-win.ext"
        def localFile = new File(downloadDir, distFilename)

        download {
            src "https://cmake.org/files/v${majorVersion}/${distFilename}"
            dest localFile
            overwrite false
        }

        ant.unzip(src: localFile, dest: workDir)

        def unzippedDir = new File(workDir, distBasename)
        ExtoolConfWriter.writeExtoolConf(unzippedDir, ["prepend;env;path;PATH;bin"])

        ant.zip(basedir: unzippedDir, destfile: new File(repoDir, extFilename))
    }
}

task cmake_mac {
    dependsOn "create_dirs"

    doLast {
        // https://cmake.org/files/v3.10/cmake-3.10.0-Darwin-x86_64.tar.gz
        def majorVersion = "3.10"
        def fullVersion = "${majorVersion}.0"
        def distBasename = "cmake-${fullVersion}-Darwin-x86_64"
        def distFilename = "${distBasename}.tar.gz"
        def extFilename = "cmake-${fullVersion}-mac.ext"
        def localFile = new File(downloadDir, distFilename)

        download {
            src "https://cmake.org/files/v${majorVersion}/${distFilename}"
            dest localFile
            overwrite false
        }

        ant.untar(src: localFile, dest: workDir, compression: "gzip")

        def unzippedDir = new File(workDir, distBasename)
        ExtoolConfWriter.writeExtoolConf(unzippedDir, ["prepend;env;path;PATH;bin"])

        ant.zip(basedir: unzippedDir, destfile: new File(repoDir, extFilename))
    }
}

task jom_win {
    dependsOn "create_dirs"

    doLast {
        def version = "1.1.2"
        def distBasename = "jom_" + version.replaceAll("\\.", "_")
        def distFilename = "${distBasename}.zip"
        def extFilename = "jom-${version}-win.ext"
        def localFile = new File(downloadDir, distFilename)

        download {
            src "http://ftp.fau.de/qtproject/official_releases/jom/$distBasename"
            dest localFile
            overwrite false
        }

        def unzippedDir = new File(workDir, distBasename)
        ant.unzip(src: localFile, dest: unzippedDir)

        ExtoolConfWriter.writeExtoolConf(unzippedDir, ["prepend;env;path;PATH;."])

        ant.zip(basedir: unzippedDir, destfile: new File(repoDir, extFilename))
    }
}

task ninja_win {
    dependsOn "create_dirs"

    doLast {
        def version = "1.8.2"
        def basename = "ninja-${version}-win"
        def localFile = new File(downloadDir, "${basename}.zip")

        download {
            src "https://github.com/ninja-build/ninja/releases/download/v${version}/ninja-win.zip"
            dest localFile
            overwrite false
        }

        def unzippedDir = new File(workDir, basename)
        ant.unzip(src: localFile, dest: unzippedDir)

        ExtoolConfWriter.writeExtoolConf(unzippedDir, ["prepend;env;path;PATH;."])

        ant.zip(basedir: unzippedDir, destfile: new File(repoDir, "${basename}.ext"))
    }
}


task qtcreator_win {
    dependsOn "create_dirs"

    doLast {
        def version = "4.4.1"
        def extoolName = "qtcreator-${version}-win"
        def localFile = new File(downloadDir, "${extoolName}.zip")

        download {
            src "https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/tools_qtcreator/qt.tools.qtcreator/$version-0qtcreator.7z"
            dest localFile
            overwrite false
        }

        def unzippedDir = new File(workDir, extoolName)
        CompressUtils.extract7z(localFile, unzippedDir)

        ExtoolConfWriter.writeExtoolConf(unzippedDir, ["prepend;env;path;PATH;Tools/QtCreator/bin"])

        ant.zip(basedir: unzippedDir, destfile: new File(repoDir, "${extoolName}.ext"))
    }
}

task mingw64_gcc {
    dependsOn "create_dirs"

    doLast {
        def remoteBasename = "x86_64-7.2.0-release-posix-sjlj-rt_v5-rev0"
        def extoolName = "mingw-${remoteBasename}"
        def url = "https://netcologne.dl.sourceforge.net/project/mingw-w64/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/7.2.0/threads-posix/sjlj/${remoteBasename}.7z"

        def localFile = new File(downloadDir, "${remoteBasename}.7z")

        def extractDir = new File(workDir, remoteBasename)
        FileUtils.cleanDir(extractDir)

        download {
            src url
            dest localFile
            overwrite false
        }

        def unzippedDir = new File(workDir, remoteBasename)
        exec {
            // We need to use the command line tool, the Java implementation fails
            // See https://issues.apache.org/jira/browse/COMPRESS-431
            commandLine new File(projectDir, "tools/7za.exe"), "x", "-o" + unzippedDir.canonicalPath, localFile.canonicalPath
        }

        ExtoolConfWriter.writeExtoolConf(unzippedDir, [
                "prepend;env;path;PATH;mingw64/bin",
                "prepend;env;path;PATH;mingw64/x86_64-w64-mingw32/bin",
                "prepend;env;path;PATH;mingw64/opt/bin",
        ])

        ant.zip(basedir: unzippedDir, destfile: new File(repoDir, "${extoolName}.ext"))
    }
}


task qtsdk_win {
    dependsOn "extoolsLoad"

    doFirst {
        def majorMinor = "5.9"
        def patchLevel = "2"
        def version = "${majorMinor}.${patchLevel}"
        def basename = "qt-everywhere-opensource-src-${version}"
        def filename = "${basename}.zip"
        def localZipFile = new File(downloadDir, filename)
        download {
            src "http://download.qt.io/official_releases/qt/${majorMinor}/${version}/single/${filename}"
            dest localZipFile
            overwrite false
        }

        String configureString = """
            cmd /c configure.bat
                -shared
                -debug-and-release
                -platform win32-g++
                -make-tool mingw32-make  
                -opensource
                -confirm-license
                -c++std c++1z
                -nomake examples
                -skip wayland
                -skip purchasing
                -skip location
                -qt-zlib
                -qt-pcre
                -qt-libpng
                -no-libjpeg
                -qt-freetype
                -no-openssl
                -no-opengl
                // -angle
                // -opengl es2
                // -no-angle
            """

        String configureSpecificInstallBasename = "qtbuild"

        def qtWorkDirCandidates = [
                "C:\\QtTemp",
                System.getenv("TEMP"),
                workDir.canonicalPath,
        ].findAll { it != null }
        File qtWorkDir
        String qtInstallDirString = qtWorkDirCandidates.find { def candidate ->
            // Build fails with MingW if install path is too long
            // fatal error: ../../../../../src/platformsupport/fontdatabases/freetype/qfreetypefontdatabase_p.h: No such file or directory
            // See QTBUG-64298
            if (candidate.length() >= 50) // Max is 58 but we have subfolders
                return false
            def f = new File(candidate, "qt") // Use short paths to avoid build issues
            f.mkdirs()
            if (f.isDirectory() && f.canWrite()) {
                qtWorkDir = f
                return true
            }
        }

        if (qtWorkDir == null)
            throw new RuntimeException("Unable to find a proper QT work dir, tried: " + qtWorkDirCandidates.join(";"))
        qtWorkDir.mkdirs()

        def qtInstallDir = new File(qtWorkDir, "inst") // Use short paths to avoid build issues
        logger.info("qtInstallDir=${qtInstallDir.canonicalPath}")

        def qtSrcDir = new File(qtWorkDir, "src")
        logger.info("qtSrcDir=${qtSrcDir.canonicalPath}")

        // The configure script stores makefiles and other configuration
        // files in the original source tree, so always start from scratch
        [qtSrcDir, qtInstallDir].each {
            if (it.exists()) {
                logger.lifecycle("Cleaning up, deleting " + it.canonicalPath)
                FileUtils.cleanDir(it)
            }
        }


        logger.lifecycle("Unzipping ${localZipFile.canonicalPath} to ${qtSrcDir.canonicalPath}")
        ant.unzip(src: localZipFile, dest: qtSrcDir) {
            cutdirsmapper(dirs: 1) // Strip top level directory to reduce paths length
        }

        configureString += " -prefix ${qtInstallDir.canonicalPath} "
        String[] configureArgs = configureString.
                replaceAll("(?m)\\/\\/.*\$", "").
                split("\\s").
                findAll { it.length() > 0 }.
                toArray()

        logger.lifecycle("Configuring")
        logger.info(configureString)
        extoolexec {
            workingDir qtSrcDir
            commandLine configureArgs
        }

        logger.lifecycle("Building QT")
        extoolexec {
            workingDir qtSrcDir
            commandLine "mingw32-make", "-j", "8"
        }

        logger.lifecycle("Installing")
        extoolexec {
            workingDir qtSrcDir
            commandLine "mingw32-make", "-j", "8", "install"
        }

        ExtoolConfWriter.writeExtoolConf(qtInstallDir, [
                "prepend;env;path;CMAKE_PREFIX_PATH;lib/cmake",
                "prepend;env;path;PATH;bin",
        ])


        new File(qtInstallDir, "configuration.txt").text = configureString

        def md5 = Checksum.md5(configureString).subSequence(1, 7)
        def extoolName = "qt-sdk-${version}-win-${md5}"
        def extFilename = "${extoolName}.ext"

        logger.lifecycle("Zipping")
        ant.zip(basedir: qtInstallDir, destfile: new File(repoDir, extFilename))
    }
}

task cmd {
    dependsOn "extoolsLoad"
    doLast {
        extoolexec {
            commandLine "cmd", "/C", "start", "cmd"
        }
    }
}

//task msys_gcc {
//    dependsOn "create_dirs"
//
//    doLast {
//        def extoolName = "msys-2017-11-15"
//        def urls = """
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-binutils-2.29.1-1-any.pkg.tar.xz
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-bzip2-1.0.6-6-any.pkg.tar.xz
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-crt-git-5.0.0.4966.1eee2140-1-any.pkg.tar.xz
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-gcc-7.2.0-1-any.pkg.tar.xz
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-gcc-libs-7.2.0-1-any.pkg.tar.xz
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-gmp-6.1.2-1-any.pkg.tar.xz
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-headers-git-5.0.0.4966.1eee2140-1-any.pkg.tar.xz
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-isl-0.18-1-any.pkg.tar.xz
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-libiconv-1.15-1-any.pkg.tar.xz
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-libwinpthread-git-5.0.0.4850.d1662dc7-1-any.pkg.tar.xz
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-mpc-1.0.3-2-any.pkg.tar.xz
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-mpfr-3.1.6-1-any.pkg.tar.xz
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-windows-default-manifest-6.4-3-any.pkg.tar.xz
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-winpthreads-git-5.0.0.4850.d1662dc7-1-any.pkg.tar.xz
//http://repo.msys2.org/mingw/x86_64/mingw-w64-x86_64-zlib-1.2.11-1-any.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/expat-2.2.4-1-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/gcc-libs-6.3.0-1-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/gdb-7.11.1-1-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/gdbm-1.11-3-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/icu-59.1-1-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/libbz2-1.0.6-2-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/libexpat-2.2.4-1-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/libffi-3.2.1-1-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/libgdbm-1.11-3-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/libiconv-1.14-2-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/libopenssl-1.0.2.l-2-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/libreadline-7.0.003-1-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/libsqlite-3.19.3.0-2-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/msys2-runtime-2.9.0-2-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/ncurses-6.0.20170708-2-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/python2-2.7.13-1-x86_64.pkg.tar.xz
//http://repo.msys2.org/msys/x86_64/zlib-1.2.11-1-x86_64.pkg.tar.xz
//"""
//        def extractDir = new File(workDir, extoolName)
//        FileUtils.cleanDir(extractDir)
//
//        urls.eachLine { url ->
//            if (url.matches("\\s*"))
//                return
//            def distFilename = url.split("/").last()
//            def distBasename = distFilename.replace(".tar.xz", "")
//            def localFile = new File(downloadDir, distFilename)
//            def tarFile = new File(downloadDir, "${distBasename}.tar")
//            logger.lifecycle("Downloading and extracting " + distBasename)
//            logger.debug("Downloading $distBasename from $url")
//            download {
//                src url
//                dest localFile
//                overwrite false
//            }
//            logger.debug("Uncompressing $localFile to $tarFile")
//            CompressUtils.extractXz(localFile.toPath(), tarFile.toPath())
//            logger.debug("Untaring $tarFile to $extractDir")
//            ant.untar(src: tarFile, dest: extractDir)
//        }
//        [".BUILDINFO", ".MTREE", ".PKGINFO", ".INSTALL"].each {
//            new File(extractDir, it).delete()
//        }
//
//        ExtoolConfWriter.writeExtoolConf(extractDir, [
//                "prepend;env;path;PATH;mingw64/bin",
//                "prepend;env;path;PATH;usr/bin",
//        ])
//
//        logger.lifecycle("Packing " + extoolName)
//        def extFile = new File(repoDir, "${extoolName}.ext")
//        logger.debug("Zipping $extractDir to ${extoolName}.ext")
//        ant.zip(basedir: extractDir, destfile: extFile)
//
//    }
//}
//
